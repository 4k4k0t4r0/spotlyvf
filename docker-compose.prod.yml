version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: spotlyvf_db_prod
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: spotlyvf
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./db_init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    command: --default-authentication-plugin=mysql_native_password --max-connections=1000
    networks:
      - spotlyvf_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: spotlyvf_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - spotlyvf_network

  # Django Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: spotlyvf_backend_prod
    restart: unless-stopped
    volumes:
      - static_files_prod:/app/staticfiles
      - media_files_prod:/app/media
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=3306
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    depends_on:
      - db
      - redis
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn spotlyvf_backend.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120"
    networks:
      - spotlyvf_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: spotlyvf_celery_prod
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
      - media_files_prod:/app/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=3306
      - REDIS_URL=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
    depends_on:
      - db
      - redis
    command: celery -A spotlyvf_backend worker --loglevel=info --concurrency=2
    networks:
      - spotlyvf_network

  # Celery Beat (for periodic tasks)
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: spotlyvf_celery_beat_prod
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=3306
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    command: celery -A spotlyvf_backend beat --loglevel=info
    networks:
      - spotlyvf_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: spotlyvf_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_files_prod:/var/www/static
      - media_files_prod:/var/www/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend
    networks:
      - spotlyvf_network

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: spotlyvf_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${ADMIN_EMAIL} -d ${DOMAIN_NAME} -d api.${DOMAIN_NAME} --agree-tos

volumes:
  mysql_data_prod:
  redis_data_prod:
  static_files_prod:
  media_files_prod:

networks:
  spotlyvf_network:
    driver: bridge
